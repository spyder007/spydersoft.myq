/* 
 * API for MyQ Devices
 *
 * This is a reverse engineered and incomplete version of the MyQ API.
 *
 * The version of the OpenAPI document: 5.1
 * Contact: geregam@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spydersoft.myq.Client;
using spydersoft.myq.Model;

namespace spydersoft.myq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// retrieve a list of countries for the current user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of countries for the current user 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>List&lt;Country&gt;</returns>
        List<Country> GetCountries (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));

        /// <summary>
        /// retrieve a list of countries for the current user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of countries for the current user 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        ApiResponse<List<Country>> GetCountriesWithHttpInfo (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));
        /// <summary>
        /// retrieve the specific country for the given code
        /// </summary>
        /// <remarks>
        /// Retrieve the specific country for the given code 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Country</returns>
        Country GetCountryByCode (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));

        /// <summary>
        /// retrieve the specific country for the given code
        /// </summary>
        /// <remarks>
        /// Retrieve the specific country for the given code 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        ApiResponse<Country> GetCountryByCodeWithHttpInfo (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// retrieve a list of countries for the current user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of countries for the current user 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of List&lt;Country&gt;</returns>
        System.Threading.Tasks.Task<List<Country>> GetCountriesAsync (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));

        /// <summary>
        /// retrieve a list of countries for the current user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of countries for the current user 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Country>>> GetCountriesAsyncWithHttpInfo (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));
        /// <summary>
        /// retrieve the specific country for the given code
        /// </summary>
        /// <remarks>
        /// Retrieve the specific country for the given code 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of Country</returns>
        System.Threading.Tasks.Task<Country> GetCountryByCodeAsync (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));

        /// <summary>
        /// retrieve the specific country for the given code
        /// </summary>
        /// <remarks>
        /// Retrieve the specific country for the given code 
        /// </remarks>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        System.Threading.Tasks.Task<ApiResponse<Country>> GetCountryByCodeAsyncWithHttpInfo (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountryApi : ICountryApiSync, ICountryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CountryApi : ICountryApi
    {
        private spydersoft.myq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CountryApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CountryApi(String basePath)
        {
            this.Configuration = spydersoft.myq.Client.Configuration.MergeConfigurations(
                spydersoft.myq.Client.GlobalConfiguration.Instance,
                new spydersoft.myq.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spydersoft.myq.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spydersoft.myq.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spydersoft.myq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CountryApi(spydersoft.myq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spydersoft.myq.Client.Configuration.MergeConfigurations(
                spydersoft.myq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spydersoft.myq.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spydersoft.myq.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spydersoft.myq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CountryApi(spydersoft.myq.Client.ISynchronousClient client,spydersoft.myq.Client.IAsynchronousClient asyncClient, spydersoft.myq.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spydersoft.myq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spydersoft.myq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spydersoft.myq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spydersoft.myq.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spydersoft.myq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// retrieve a list of countries for the current user Retrieve a list of countries for the current user 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>List&lt;Country&gt;</returns>
        public List<Country> GetCountries (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
             spydersoft.myq.Client.ApiResponse<List<Country>> localVarResponse = GetCountriesWithHttpInfo(apiVersion, myQApplicationId, brandId, culture, securityToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve a list of countries for the current user Retrieve a list of countries for the current user 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        public spydersoft.myq.Client.ApiResponse< List<Country> > GetCountriesWithHttpInfo (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new spydersoft.myq.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling CountryApi->GetCountries");

            spydersoft.myq.Client.RequestOptions localVarRequestOptions = new spydersoft.myq.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spydersoft.myq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spydersoft.myq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("apiVersion", spydersoft.myq.Client.ClientUtils.ParameterToString(apiVersion)); // path parameter
            if (myQApplicationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("MyQApplicationId", spydersoft.myq.Client.ClientUtils.ParameterToString(myQApplicationId)); // header parameter
            }
            if (brandId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("BrandId", spydersoft.myq.Client.ClientUtils.ParameterToString(brandId)); // header parameter
            }
            if (culture != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Culture", spydersoft.myq.Client.ClientUtils.ParameterToString(culture)); // header parameter
            }
            if (securityToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("SecurityToken", spydersoft.myq.Client.ClientUtils.ParameterToString(securityToken)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Country> >("/{apiVersion}/Countries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// retrieve a list of countries for the current user Retrieve a list of countries for the current user 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of List&lt;Country&gt;</returns>
        public async System.Threading.Tasks.Task<List<Country>> GetCountriesAsync (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
             spydersoft.myq.Client.ApiResponse<List<Country>> localVarResponse = await GetCountriesAsyncWithHttpInfo(apiVersion, myQApplicationId, brandId, culture, securityToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a list of countries for the current user Retrieve a list of countries for the current user 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        public async System.Threading.Tasks.Task<spydersoft.myq.Client.ApiResponse<List<Country>>> GetCountriesAsyncWithHttpInfo (string apiVersion, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new spydersoft.myq.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling CountryApi->GetCountries");


            spydersoft.myq.Client.RequestOptions localVarRequestOptions = new spydersoft.myq.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("apiVersion", spydersoft.myq.Client.ClientUtils.ParameterToString(apiVersion)); // path parameter
            if (myQApplicationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("MyQApplicationId", spydersoft.myq.Client.ClientUtils.ParameterToString(myQApplicationId)); // header parameter
            }
            if (brandId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("BrandId", spydersoft.myq.Client.ClientUtils.ParameterToString(brandId)); // header parameter
            }
            if (culture != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Culture", spydersoft.myq.Client.ClientUtils.ParameterToString(culture)); // header parameter
            }
            if (securityToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("SecurityToken", spydersoft.myq.Client.ClientUtils.ParameterToString(securityToken)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Country>>("/{apiVersion}/Countries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// retrieve the specific country for the given code Retrieve the specific country for the given code 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Country</returns>
        public Country GetCountryByCode (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
             spydersoft.myq.Client.ApiResponse<Country> localVarResponse = GetCountryByCodeWithHttpInfo(apiVersion, countryCode, myQApplicationId, brandId, culture, securityToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve the specific country for the given code Retrieve the specific country for the given code 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        public spydersoft.myq.Client.ApiResponse< Country > GetCountryByCodeWithHttpInfo (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new spydersoft.myq.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling CountryApi->GetCountryByCode");

            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new spydersoft.myq.Client.ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->GetCountryByCode");

            spydersoft.myq.Client.RequestOptions localVarRequestOptions = new spydersoft.myq.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spydersoft.myq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spydersoft.myq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("apiVersion", spydersoft.myq.Client.ClientUtils.ParameterToString(apiVersion)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryCode", spydersoft.myq.Client.ClientUtils.ParameterToString(countryCode)); // path parameter
            if (myQApplicationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("MyQApplicationId", spydersoft.myq.Client.ClientUtils.ParameterToString(myQApplicationId)); // header parameter
            }
            if (brandId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("BrandId", spydersoft.myq.Client.ClientUtils.ParameterToString(brandId)); // header parameter
            }
            if (culture != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Culture", spydersoft.myq.Client.ClientUtils.ParameterToString(culture)); // header parameter
            }
            if (securityToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("SecurityToken", spydersoft.myq.Client.ClientUtils.ParameterToString(securityToken)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< Country >("/{apiVersion}/Countries/{countryCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountryByCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// retrieve the specific country for the given code Retrieve the specific country for the given code 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of Country</returns>
        public async System.Threading.Tasks.Task<Country> GetCountryByCodeAsync (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
             spydersoft.myq.Client.ApiResponse<Country> localVarResponse = await GetCountryByCodeAsyncWithHttpInfo(apiVersion, countryCode, myQApplicationId, brandId, culture, securityToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve the specific country for the given code Retrieve the specific country for the given code 
        /// </summary>
        /// <exception cref="spydersoft.myq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">For right now, this should be v5 except for the Accounts/{id}/Devices, which is v5.1 </param>
        /// <param name="countryCode">The country code to return</param>
        /// <param name="myQApplicationId"> (optional, default to &quot;JVM/G9Nwih5BwKgNCjLxiFUQxQijAebyyg8QUHr7JOrP+tuPb8iHfRHKwTmDzHOu&quot;)</param>
        /// <param name="brandId"> (optional, default to &quot;2&quot;)</param>
        /// <param name="culture"> (optional, default to &quot;en&quot;)</param>
        /// <param name="securityToken"> (optional)</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        public async System.Threading.Tasks.Task<spydersoft.myq.Client.ApiResponse<Country>> GetCountryByCodeAsyncWithHttpInfo (string apiVersion, string countryCode, string myQApplicationId = default(string), string brandId = default(string), string culture = default(string), string securityToken = default(string))
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new spydersoft.myq.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling CountryApi->GetCountryByCode");

            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new spydersoft.myq.Client.ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->GetCountryByCode");


            spydersoft.myq.Client.RequestOptions localVarRequestOptions = new spydersoft.myq.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("apiVersion", spydersoft.myq.Client.ClientUtils.ParameterToString(apiVersion)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryCode", spydersoft.myq.Client.ClientUtils.ParameterToString(countryCode)); // path parameter
            if (myQApplicationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("MyQApplicationId", spydersoft.myq.Client.ClientUtils.ParameterToString(myQApplicationId)); // header parameter
            }
            if (brandId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("BrandId", spydersoft.myq.Client.ClientUtils.ParameterToString(brandId)); // header parameter
            }
            if (culture != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Culture", spydersoft.myq.Client.ClientUtils.ParameterToString(culture)); // header parameter
            }
            if (securityToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("SecurityToken", spydersoft.myq.Client.ClientUtils.ParameterToString(securityToken)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Country>("/{apiVersion}/Countries/{countryCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountryByCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
